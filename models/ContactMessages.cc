/**
 *
 *  ContactMessages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ContactMessages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string ContactMessages::Cols::_id            = "id";
const std::string ContactMessages::Cols::_name          = "name";
const std::string ContactMessages::Cols::_surname       = "surname";
const std::string ContactMessages::Cols::_message       = "message";
const std::string ContactMessages::Cols::_submission_ts = "submission_ts";
const std::string ContactMessages::Cols::_hash          = "hash";
const std::string ContactMessages::Cols::_email         = "email";
const std::string ContactMessages::primaryKeyName       = "id";
const bool ContactMessages::hasPrimaryKey = true;
const std::string ContactMessages::tableName = "contact_messages";

const std::vector<typename ContactMessages::MetaData> ContactMessages::metaData_ = {
        {"id",            "uint64_t",    "integer", 8, 1, 1, 1},
        {"name",          "std::string", "text",    0, 0, 0, 1},
        {"surname",       "std::string", "text",    0, 0, 0, 1},
        {"message",       "std::string", "text",    0, 0, 0, 1},
        {"submission_ts", "uint64_t",    "integer", 8, 0, 0, 1},
        {"hash",          "std::string", "text",    0, 0, 0, 1},
        {"email",         "std::string", "text",    0, 0, 0, 1}
};

const std::string &ContactMessages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

ContactMessages::ContactMessages(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if (!r["name"].isNull())
        {
            name_ = std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if (!r["surname"].isNull())
        {
            surname_ = std::make_shared<std::string>(r["surname"].as<std::string>());
        }
        if (!r["message"].isNull())
        {
            message_ = std::make_shared<std::string>(r["message"].as<std::string>());
        }
        if (!r["submission_ts"].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>(r["submission_ts"].as<uint64_t>());
        }
        if (!r["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(r["hash"].as<std::string>());
        }
        if (!r["email"].isNull())
        {
            email_ = std::make_shared<std::string>(r["email"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t) indexOffset;
        if (offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            id_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            name_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            surname_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            message_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if (!r[index].isNull())
        {
            hash_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if (!r[index].isNull())
        {
            email_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

ContactMessages::ContactMessages(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            surname_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            message_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

ContactMessages::ContactMessages(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["name"].isNull())
        {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("surname"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["surname"].isNull())
        {
            surname_ = std::make_shared<std::string>(pJson["surname"].asString());
        }
    }
    if (pJson.isMember("message"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["message"].isNull())
        {
            message_ = std::make_shared<std::string>(pJson["message"].asString());
        }
    }
    if (pJson.isMember("submission_ts"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["submission_ts"].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>((uint64_t) pJson["submission_ts"].asUInt64());
        }
    }
    if (pJson.isMember("hash"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if (pJson.isMember("email"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["email"].isNull())
        {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

void ContactMessages::updateByMasqueradedJson(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            surname_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            message_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void ContactMessages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["name"].isNull())
        {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("surname"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["surname"].isNull())
        {
            surname_ = std::make_shared<std::string>(pJson["surname"].asString());
        }
    }
    if (pJson.isMember("message"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["message"].isNull())
        {
            message_ = std::make_shared<std::string>(pJson["message"].asString());
        }
    }
    if (pJson.isMember("submission_ts"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["submission_ts"].isNull())
        {
            submissionTs_ = std::make_shared<uint64_t>((uint64_t) pJson["submission_ts"].asUInt64());
        }
    }
    if (pJson.isMember("hash"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if (pJson.isMember("email"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["email"].isNull())
        {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

const uint64_t &ContactMessages::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &ContactMessages::getId() const noexcept
{
    return id_;
}

void ContactMessages::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}


const typename ContactMessages::PrimaryKeyType &ContactMessages::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &ContactMessages::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if (name_)
        return *name_;
    return defaultValue;
}

const std::shared_ptr<std::string> &ContactMessages::getName() const noexcept
{
    return name_;
}

void ContactMessages::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}

void ContactMessages::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}


const std::string &ContactMessages::getValueOfSurname() const noexcept
{
    const static std::string defaultValue = std::string();
    if (surname_)
        return *surname_;
    return defaultValue;
}

const std::shared_ptr<std::string> &ContactMessages::getSurname() const noexcept
{
    return surname_;
}

void ContactMessages::setSurname(const std::string &pSurname) noexcept
{
    surname_ = std::make_shared<std::string>(pSurname);
    dirtyFlag_[2] = true;
}

void ContactMessages::setSurname(std::string &&pSurname) noexcept
{
    surname_ = std::make_shared<std::string>(std::move(pSurname));
    dirtyFlag_[2] = true;
}


const std::string &ContactMessages::getValueOfMessage() const noexcept
{
    const static std::string defaultValue = std::string();
    if (message_)
        return *message_;
    return defaultValue;
}

const std::shared_ptr<std::string> &ContactMessages::getMessage() const noexcept
{
    return message_;
}

void ContactMessages::setMessage(const std::string &pMessage) noexcept
{
    message_ = std::make_shared<std::string>(pMessage);
    dirtyFlag_[3] = true;
}

void ContactMessages::setMessage(std::string &&pMessage) noexcept
{
    message_ = std::make_shared<std::string>(std::move(pMessage));
    dirtyFlag_[3] = true;
}


const uint64_t &ContactMessages::getValueOfSubmissionTs() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (submissionTs_)
        return *submissionTs_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &ContactMessages::getSubmissionTs() const noexcept
{
    return submissionTs_;
}

void ContactMessages::setSubmissionTs(const uint64_t &pSubmissionTs) noexcept
{
    submissionTs_ = std::make_shared<uint64_t>(pSubmissionTs);
    dirtyFlag_[4] = true;
}


const std::string &ContactMessages::getValueOfHash() const noexcept
{
    const static std::string defaultValue = std::string();
    if (hash_)
        return *hash_;
    return defaultValue;
}

const std::shared_ptr<std::string> &ContactMessages::getHash() const noexcept
{
    return hash_;
}

void ContactMessages::setHash(const std::string &pHash) noexcept
{
    hash_ = std::make_shared<std::string>(pHash);
    dirtyFlag_[5] = true;
}

void ContactMessages::setHash(std::string &&pHash) noexcept
{
    hash_ = std::make_shared<std::string>(std::move(pHash));
    dirtyFlag_[5] = true;
}


const std::string &ContactMessages::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if (email_)
        return *email_;
    return defaultValue;
}

const std::shared_ptr<std::string> &ContactMessages::getEmail() const noexcept
{
    return email_;
}

void ContactMessages::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[6] = true;
}

void ContactMessages::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[6] = true;
}


void ContactMessages::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &ContactMessages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {
            "name",
            "surname",
            "message",
            "submission_ts",
            "hash",
            "email"
    };
    return inCols;
}

void ContactMessages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getSurname())
        {
            binder << getValueOfSurname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getMessage())
        {
            binder << getValueOfMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getSubmissionTs())
        {
            binder << getValueOfSubmissionTs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ContactMessages::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void ContactMessages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getSurname())
        {
            binder << getValueOfSurname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getMessage())
        {
            binder << getValueOfMessage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getSubmissionTs())
        {
            binder << getValueOfSubmissionTs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
}

Json::Value ContactMessages::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getName())
    {
        ret["name"] = getValueOfName();
    }
    else
    {
        ret["name"] = Json::Value();
    }
    if (getSurname())
    {
        ret["surname"] = getValueOfSurname();
    }
    else
    {
        ret["surname"] = Json::Value();
    }
    if (getMessage())
    {
        ret["message"] = getValueOfMessage();
    }
    else
    {
        ret["message"] = Json::Value();
    }
    if (getSubmissionTs())
    {
        ret["submission_ts"] = (Json::UInt64) getValueOfSubmissionTs();
    }
    else
    {
        ret["submission_ts"] = Json::Value();
    }
    if (getHash())
    {
        ret["hash"] = getValueOfHash();
    }
    else
    {
        ret["hash"] = Json::Value();
    }
    if (getEmail())
    {
        ret["email"] = getValueOfEmail();
    }
    else
    {
        ret["email"] = Json::Value();
    }
    return ret;
}

Json::Value ContactMessages::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 7)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = (Json::UInt64) getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getName())
            {
                ret[pMasqueradingVector[1]] = getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getSurname())
            {
                ret[pMasqueradingVector[2]] = getValueOfSurname();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getMessage())
            {
                ret[pMasqueradingVector[3]] = getValueOfMessage();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (getSubmissionTs())
            {
                ret[pMasqueradingVector[4]] = (Json::UInt64) getValueOfSubmissionTs();
            }
            else
            {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (getHash())
            {
                ret[pMasqueradingVector[5]] = getValueOfHash();
            }
            else
            {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty())
        {
            if (getEmail())
            {
                ret[pMasqueradingVector[6]] = getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getName())
    {
        ret["name"] = getValueOfName();
    }
    else
    {
        ret["name"] = Json::Value();
    }
    if (getSurname())
    {
        ret["surname"] = getValueOfSurname();
    }
    else
    {
        ret["surname"] = Json::Value();
    }
    if (getMessage())
    {
        ret["message"] = getValueOfMessage();
    }
    else
    {
        ret["message"] = Json::Value();
    }
    if (getSubmissionTs())
    {
        ret["submission_ts"] = (Json::UInt64) getValueOfSubmissionTs();
    }
    else
    {
        ret["submission_ts"] = Json::Value();
    }
    if (getHash())
    {
        ret["hash"] = getValueOfHash();
    }
    else
    {
        ret["hash"] = Json::Value();
    }
    if (getEmail())
    {
        ret["email"] = getValueOfEmail();
    }
    else
    {
        ret["email"] = Json::Value();
    }
    return ret;
}

bool ContactMessages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("name"))
    {
        if (!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err = "The name column cannot be null";
        return false;
    }
    if (pJson.isMember("surname"))
    {
        if (!validJsonOfField(2, "surname", pJson["surname"], err, true))
            return false;
    }
    else
    {
        err = "The surname column cannot be null";
        return false;
    }
    if (pJson.isMember("message"))
    {
        if (!validJsonOfField(3, "message", pJson["message"], err, true))
            return false;
    }
    else
    {
        err = "The message column cannot be null";
        return false;
    }
    if (pJson.isMember("submission_ts"))
    {
        if (!validJsonOfField(4, "submission_ts", pJson["submission_ts"], err, true))
            return false;
    }
    else
    {
        err = "The submission_ts column cannot be null";
        return false;
    }
    if (pJson.isMember("hash"))
    {
        if (!validJsonOfField(5, "hash", pJson["hash"], err, true))
            return false;
    }
    else
    {
        err = "The hash column cannot be null";
        return false;
    }
    if (pJson.isMember("email"))
    {
        if (!validJsonOfField(6, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err = "The email column cannot be null";
        return false;
    }
    return true;
}

bool ContactMessages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if (pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty())
    {
        if (pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[1].empty())
    {
        if (pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[2].empty())
    {
        if (pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[3].empty())
    {
        if (pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[4].empty())
    {
        if (pJson.isMember(pMasqueradingVector[4]))
        {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[5].empty())
    {
        if (pJson.isMember(pMasqueradingVector[5]))
        {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[6].empty())
    {
        if (pJson.isMember(pMasqueradingVector[6]))
        {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    return true;
}

bool ContactMessages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("name"))
    {
        if (!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if (pJson.isMember("surname"))
    {
        if (!validJsonOfField(2, "surname", pJson["surname"], err, false))
            return false;
    }
    if (pJson.isMember("message"))
    {
        if (!validJsonOfField(3, "message", pJson["message"], err, false))
            return false;
    }
    if (pJson.isMember("submission_ts"))
    {
        if (!validJsonOfField(4, "submission_ts", pJson["submission_ts"], err, false))
            return false;
    }
    if (pJson.isMember("hash"))
    {
        if (!validJsonOfField(5, "hash", pJson["hash"], err, false))
            return false;
    }
    if (pJson.isMember("email"))
    {
        if (!validJsonOfField(6, "email", pJson["email"], err, false))
            return false;
    }
    return true;
}

bool ContactMessages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if (pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    return true;
}

bool ContactMessages::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch (index)
    {
        case 0:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation)
            {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 5:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;

        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
